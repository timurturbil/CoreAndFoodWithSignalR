@model CoreAndFood.Models.Category
@{
    ViewData["Title"] = "AddCategory";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<form class="form-group" id="categoryForm">
    <b>Category Name</b>
    @Html.TextBoxFor(x => x.CategoryName, new {@class = "form-control"})
    @Html.ValidationMessageFor(x => x.CategoryName, "", new {@style = "color:red"})
    <br />
    <b>Category Description</b>
    @Html.TextBoxFor(x => x.CategoryDescription, new {@class = "form-control"})
    <br />
    <button class="btn btn-info" onclick="addCategory()">Add Category</button>
</form>
<button id="addButton" style="visibility: hidden;">Add Category</button>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/category.js"></script>
<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
<script type="text/javascript">
    function addCategory() {
        var data = $("#categoryForm").serialize();
        $.ajax({
            type: 'POST',
            url: '/Category/AddCategory',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
            data: data,
            success: function (result) {
                window.location.href = result.redirectToUrl;
            },
            error: function () {
                alert('Failed to receive the Data');
                console.log('Failed ');
            }
        })
        document.getElementById("addButton").click();

    }

</script>